package smithy4s.codegen

/**
  * This construct aims at adding metadata information to the classpath to let Smithy4s
  * know about code that may have been generated in upstream modules.
  *
  * A "smithy4sGenerated" metadata holds a list of all namespaces that will have already
  * been generated by smithy4s.
  */
private[smithy4s] object SmithyResources {

  def produce(
      resourceOutputFolder: os.Path,
      localSmithyFiles: List[os.Path],
      namespaces: List[String]
  ): List[os.Path] = {

    val smithyFolder = resourceOutputFolder / "META-INF" / "smithy"
    val namespaceTrackingSmithyFiles = namespaces.map { ns =>
      val filePath = smithyFolder / s"smithy4s.$ns.smithy"
      val content = s"""|$$version: "2.0"
                        |
                        |metadata smithy4sGenerated = ["$ns"]
                        |""".stripMargin
      (filePath, content)
    }
    val localCopyBindings = localSmithyFiles.map { path =>
      (path, smithyFolder / path.last)
    }
    val allSmithyFiles =
      namespaceTrackingSmithyFiles.map(_._1) ++ localCopyBindings.map(_._2)

    val metadataFile = smithyFolder / "manifest"

    val metadataFileContent =
      allSmithyFiles.map(_.last).mkString(System.lineSeparator())

    os.write.over(
      metadataFile,
      metadataFileContent,
      createFolders = true
    )

    namespaceTrackingSmithyFiles.map { case (path, content) =>
      os.write.over(path, content, createFolders = true)
    }

    localCopyBindings.foreach { case (from, to) =>
      os.copy(
        from,
        to,
        replaceExisting = true,
        createFolders = true
      )
    }

    val allProducedFiles = metadataFile :: allSmithyFiles
    allProducedFiles
  }

}
